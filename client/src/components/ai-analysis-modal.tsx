import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Brain, TrendingUp, Lightbulb, MessageSquare, Sparkles } from "lucide-react";
import { useMutation } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";

interface AIAnalysisModalProps {
  diaryId: number;
  content: string;
  emotion: string;
  trigger: React.ReactNode;
  onAnalysisComplete?: () => void;
}

interface AIAnalysisResult {
  emotionAnalysis: {
    primary: string;
    secondary: string[];
    confidence: number;
  };
  sentimentScore: number;
  themes: string[];
  keywords: string[];
  suggestions: string;
  summary: string;
}

export function AIAnalysisModal({ diaryId, content, emotion, trigger, onAnalysisComplete }: AIAnalysisModalProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [hasAnalysis, setHasAnalysis] = useState(false);
  const [existingAnalysis, setExistingAnalysis] = useState<any>(null);
  const { toast } = useToast();

  const analysisMutation = useMutation({
    mutationFn: async () => {
      // console.log("AI Î∂ÑÏÑù ÏöîÏ≤≠ ÏãúÏûë:", { diaryId, content, emotion });
      const response = await apiRequest('POST', `/api/diary-entries/${diaryId}/analysis`, {
        content,
        emotion
      });
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || `HTTP ${response.status}: ${response.statusText}`);
      }
      
      const data = await response.json();
      // console.log("AI Î∂ÑÏÑù ÏùëÎãµ:", data);
      return data;
    },
    onSuccess: (data: AIAnalysisResult) => {
      // console.log("AI Î∂ÑÏÑù ÏÑ±Í≥µ:", data);
      setHasAnalysis(true);
      setExistingAnalysis(data);
      if (onAnalysisComplete) {
        onAnalysisComplete();
      }
      toast({
        title: "AI Î∂ÑÏÑù ÏôÑÎ£å! üß†",
        description: "ÏùºÍ∏∞Î•º Î∂ÑÏÑùÌïòÏó¨ Ïù∏ÏÇ¨Ïù¥Ìä∏Î•º Ï†úÍ≥µÌï©ÎãàÎã§.",
      });
    },
    onError: (error: any) => {
      // console.error("AI Î∂ÑÏÑù Ïò§Î•ò:", error);
      toast({
        title: "Î∂ÑÏÑù Ïã§Ìå®",
        description: error.message || "AI Î∂ÑÏÑùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.",
        variant: "destructive",
      });
    },
  });

  // AI Î∂ÑÏÑù ÏÉÅÌÉú ÌôïÏù∏
  useEffect(() => {
    const checkAnalysisStatus = async () => {
      try {
        // console.log(`ÏùºÍ∏∞ ${diaryId}Ïùò AI Î∂ÑÏÑù ÏÉÅÌÉú ÌôïÏù∏ ÏãúÏûë`);
        const response = await apiRequest('GET', `/api/diary-entries/${diaryId}/analysis`);
        // console.log('API ÏùëÎãµ ÏÉÅÌÉú:', response.status, response.ok);
        
        if (response.ok) {
          const data = await response.json();
          // console.log('AI Î∂ÑÏÑù ÏÉÅÌÉú ÌôïÏù∏ Í≤∞Í≥º:', data);
          
          if (data.hasAnalysis && data.analysis) {
            // console.log('Í∏∞Ï°¥ Î∂ÑÏÑù Í≤∞Í≥º Î∞úÍ≤¨:', data.analysis);
            setHasAnalysis(true);
            setExistingAnalysis(data.analysis);
            // console.log('ÏÉÅÌÉú ÏÑ§Ï†ï ÏôÑÎ£å: hasAnalysis=true, existingAnalysis=ÏÑ§Ï†ïÎê®');
          } else {
            // console.log('Í∏∞Ï°¥ Î∂ÑÏÑù Í≤∞Í≥º ÏóÜÏùå');
            setHasAnalysis(false);
            setExistingAnalysis(null);
            // console.log('ÏÉÅÌÉú ÏÑ§Ï†ï ÏôÑÎ£å: hasAnalysis=false, existingAnalysis=null');
          }
        } else {
          // console.log('AI Î∂ÑÏÑù ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®:', response.status);
          setHasAnalysis(false);
          setExistingAnalysis(null);
        }
      } catch (error) {
        // console.error('AI Î∂ÑÏÑù ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®:', error);
        setHasAnalysis(false);
        setExistingAnalysis(null);
      }
    };

    // Î™®Îã¨Ïù¥ Ïó¥Î¶¥ ÎïåÎßàÎã§ ÏÉÅÌÉú ÌôïÏù∏
    if (isOpen) {
      // console.log('Î™®Îã¨ Ïó¥Î¶º, AI Î∂ÑÏÑù ÏÉÅÌÉú ÌôïÏù∏ ÏãúÏûë');
      // ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
      setHasAnalysis(false);
      setExistingAnalysis(null);
      // ÏïΩÍ∞ÑÏùò ÏßÄÏó∞ ÌõÑ ÏÉÅÌÉú ÌôïÏù∏ (ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî ÏôÑÎ£å ÌõÑ)
      setTimeout(() => {
        checkAnalysisStatus();
      }, 100);
    }
  }, [diaryId, isOpen]);

  // ÏÉÅÌÉú Î≥ÄÌôî Ï∂îÏ†Å
  useEffect(() => {
    // console.log('=== AI Î∂ÑÏÑù Î™®Îã¨ ÏÉÅÌÉú Î≥ÄÌôî ===');
    // console.log('diaryId:', diaryId);
    // console.log('isOpen:', isOpen);
    // console.log('hasAnalysis:', hasAnalysis);
    // console.log('existingAnalysis:', existingAnalysis ? 'ÏûàÏùå' : 'ÏóÜÏùå');
    // if (existingAnalysis) {
    //   console.log('existingAnalysis ÏÉÅÏÑ∏:', {
    //     id: existingAnalysis.id,
    //     diaryEntryId: existingAnalysis.diaryEntryId,
    //     emotionAnalysis: existingAnalysis.emotionAnalysis?.primary
    //   });
    // }
    // console.log('analysisMutation.data:', analysisMutation.data ? 'ÏûàÏùå' : 'ÏóÜÏùå');
    // console.log('Î∂ÑÏÑù Î≤ÑÌäº ÌëúÏãú Ïó¨Î∂Ä:', !existingAnalysis && !hasAnalysis && !analysisMutation.data);
    // console.log('========================');
  }, [diaryId, isOpen, hasAnalysis, existingAnalysis, analysisMutation.data]);

  const handleAnalyze = () => {
    if (existingAnalysis) {
      // console.log('Í∏∞Ï°¥ Î∂ÑÏÑùÏù¥ ÏûàÏúºÎØÄÎ°ú Ïû¨Î∂ÑÏÑù ÏßÑÌñâ');
    } else {
      // console.log('ÏÉàÎ°úÏö¥ Î∂ÑÏÑù ÏãúÏûë');
    }
    analysisMutation.mutate();
  };

  const getSentimentColor = (score: number) => {
    if (score >= 50) return "text-green-600";
    if (score >= 0) return "text-yellow-600";
    return "text-red-600";
  };

  const getSentimentIcon = (score: number) => {
    if (score >= 50) return "üòä";
    if (score >= 0) return "üòê";
    return "üò¢";
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        {trigger}
      </DialogTrigger>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="text-2xl font-bold text-sky-800 flex items-center gap-2">
            <Brain className={`w-6 h-6 ${hasAnalysis ? 'text-blue-600' : 'text-sky-800'}`} />
            AI ÏùºÍ∏∞ Î∂ÑÏÑù
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-6">
          {/* Í∏∞Ï°¥ Î∂ÑÏÑù Í≤∞Í≥ºÍ∞Ä ÏûàÎäî Í≤ΩÏö∞ */}
          {existingAnalysis && (
            <div className="space-y-6">
              {/* Í∞êÏ†ï Î∂ÑÏÑù */}
              <Card className="bg-gradient-to-r from-pink-soft/20 to-pink-soft/10 border-2 border-pink-soft/50">
                <CardHeader>
                  <CardTitle className="text-pink-700 flex items-center gap-2">
                    <TrendingUp className="w-5 h-5" />
                    Í∞êÏ†ï Î∂ÑÏÑù
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div className="flex items-center justify-between">
                    <span className="font-medium">Ï£ºÏöî Í∞êÏ†ï:</span>
                    <span className="text-pink-700 font-semibold">
                      {existingAnalysis.emotionAnalysis?.primary || "Î∂ÑÏÑù ÏôÑÎ£å"}
                    </span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="font-medium">Í∞êÏ†ï Ï†êÏàò:</span>
                    <span className={`font-semibold ${getSentimentColor(existingAnalysis.sentimentScore || 0)}`}>
                      {getSentimentIcon(existingAnalysis.sentimentScore || 0)} {existingAnalysis.sentimentScore || 0}/100
                    </span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="font-medium">Ïã†Î¢∞ÎèÑ:</span>
                    <span className="text-sky-700 font-semibold">
                      {Math.round((existingAnalysis.emotionAnalysis?.confidence || 0) * 100)}%
                    </span>
                  </div>
                </CardContent>
              </Card>

              {/* Ï£ºÏöî Ï£ºÏ†ú */}
              <Card className="bg-gradient-to-r from-mint-soft/20 to-mint-soft/10 border-2 border-mint-soft/50">
                <CardHeader>
                  <CardTitle className="text-mint-700 flex items-center gap-2">
                    <Lightbulb className="w-5 h-5" />
                    Ï£ºÏöî Ï£ºÏ†ú
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-wrap gap-2">
                    {(existingAnalysis.themes || []).map((theme: string, index: number) => (
                      <span
                        key={index}
                        className="px-3 py-1 bg-mint-soft/30 text-mint-700 rounded-full text-sm font-medium"
                      >
                        {theme}
                      </span>
                    ))}
                    {(!existingAnalysis.themes || existingAnalysis.themes.length === 0) && (
                      <span className="text-mint-500 text-sm">Î∂ÑÏÑù ÏôÑÎ£å</span>
                    )}
                  </div>
                </CardContent>
              </Card>

              {/* ÌÇ§ÏõåÎìú */}
              <Card className="bg-gradient-to-r from-peach-soft/20 to-peach-soft/10 border-2 border-peach-soft/50">
                <CardHeader>
                  <CardTitle className="text-peach-700 flex items-center gap-2">
                    <MessageSquare className="w-5 h-5" />
                    ÌïµÏã¨ ÌÇ§ÏõåÎìú
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-wrap gap-2">
                    {(existingAnalysis.keywords || []).map((keyword: string, index: number) => (
                      <span
                        key={index}
                        className="px-3 py-1 bg-peach-soft/30 text-peach-700 rounded-full text-sm font-medium"
                      >
                        {keyword}
                      </span>
                    ))}
                    {(!existingAnalysis.keywords || existingAnalysis.keywords.length === 0) && (
                      <span className="text-mint-500 text-sm">Î∂ÑÏÑù ÏôÑÎ£å</span>
                    )}
                  </div>
                </CardContent>
              </Card>

              {/* ÏöîÏïΩ */}
              <Card className="bg-gradient-to-r from-sky-soft/20 to-sky-soft/10 border-2 border-sky-soft/50">
                <CardHeader>
                  <CardTitle className="text-sky-700 flex items-center gap-2">
                    <Sparkles className="w-5 h-5" />
                    ÏùºÍ∏∞ ÏöîÏïΩ
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-sky-700 leading-relaxed">
                    {existingAnalysis.summary || "Î∂ÑÏÑù ÏôÑÎ£å"}
                  </p>
                </CardContent>
              </Card>

              {/* Í∞úÏÑ† Ï†úÏïà */}
              <Card className="bg-gradient-to-r from-coral-soft/20 to-coral-soft/10 border-2 border-coral-soft/50">
                <CardHeader>
                  <CardTitle className="text-coral-700 flex items-center gap-2">
                    <Lightbulb className="w-5 h-5" />
                    AI Ï†úÏïàÏÇ¨Ìï≠
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-coral-700 leading-relaxed">
                    {existingAnalysis.suggestions || "Î∂ÑÏÑù ÏôÑÎ£å"}
                  </p>
                </CardContent>
              </Card>

              {/* Ïû¨Î∂ÑÏÑù Î≤ÑÌäº */}
              <div className="text-center">
                <Button
                  onClick={handleAnalyze}
                  disabled={analysisMutation.isPending}
                  variant="outline"
                  className="px-6 py-2 border-2 border-sky-light/50 text-sky-700 rounded-xl hover:bg-sky-light/10"
                >
                  {analysisMutation.isPending ? (
                    <>
                      <Sparkles className="w-5 h-5 mr-2 animate-spin" />
                      Ïû¨Î∂ÑÏÑù Ï§ë...
                    </>
                  ) : (
                    <>
                      <Brain className="w-5 h-5 mr-2" />
                      Îã§Ïãú Î∂ÑÏÑùÌïòÍ∏∞
                    </>
                  )}
                </Button>
              </div>
            </div>
          )}

          {/* Î∂ÑÏÑù Î≤ÑÌäº (Í∏∞Ï°¥ Î∂ÑÏÑùÏù¥ ÏóÜÎäî Í≤ΩÏö∞ÏóêÎßå) */}
          {!existingAnalysis && !hasAnalysis && !analysisMutation.data && (
            <Card className="bg-gradient-to-r from-sky-soft to-sky-light/20 border-2 border-sky-light/50">
              <CardContent className="p-6 text-center">
                <div className="w-16 h-16 bg-sky-light/20 rounded-full flex items-center justify-center text-3xl mx-auto mb-4">
                  üß†
                </div>
                <h3 className="text-xl font-bold text-sky-800 mb-2">AIÎ°ú ÏùºÍ∏∞Î•º Î∂ÑÏÑùÌï¥Î≥¥ÏÑ∏Ïöî</h3>
                <p className="text-sky-600 mb-4">
                  Í∞êÏ†ï Î∂ÑÏÑù, Ï£ºÏöî Ï£ºÏ†ú, ÌÇ§ÏõåÎìú Ï∂îÏ∂ú, Í∞úÏÑ† Ï†úÏïà Îì±ÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§
                </p>
                <Button
                  onClick={handleAnalyze}
                  disabled={analysisMutation.isPending}
                  className="px-8 py-3 bg-gradient-to-r from-sky-light to-sky-soft text-white rounded-2xl font-semibold hover:from-sky-soft hover:to-sky-light transition-all transform hover:scale-105 shadow-lg"
                >
                  {analysisMutation.isPending ? (
                    <>
                      <Sparkles className="w-5 h-5 mr-2 animate-spin" />
                      Î∂ÑÏÑù Ï§ë...
                    </>
                  ) : (
                    <>
                      <Brain className="w-5 h-5 mr-2" />
                      AI Î∂ÑÏÑù ÏãúÏûë
                    </>
                  )}
                </Button>
              </CardContent>
            </Card>
          )}

          {/* ÎîîÎ≤ÑÍπÖ Ï†ïÎ≥¥ (Í∞úÎ∞ú Î™®ÎìúÏóêÏÑúÎßå) - Ï£ºÏÑù Ï≤òÎ¶¨Îê® */}
          {/* {process.env.NODE_ENV === 'development' && (
            <Card className="bg-gray-100 border border-gray-300">
              <CardContent className="p-4">
                <h4 className="font-bold mb-2">ÎîîÎ≤ÑÍπÖ Ï†ïÎ≥¥</h4>
                <div className="text-sm space-y-1">
                  <div>existingAnalysis: {existingAnalysis ? 'ÏûàÏùå' : 'ÏóÜÏùå'}</div>
                  <div>hasAnalysis: {hasAnalysis ? 'true' : 'false'}</div>
                  <div>analysisMutation.data: {analysisMutation.data ? 'ÏûàÏùå' : 'ÏóÜÏùå'}</div>
                  <div>Î∂ÑÏÑù Î≤ÑÌäº ÌëúÏãú: {(!existingAnalysis && !hasAnalysis && !analysisMutation.data) ? 'Ïòà' : 'ÏïÑÎãàÏò§'}</div>
                </div>
              </CardContent>
            </Card>
          )} */}
        </div>
      </DialogContent>
    </Dialog>
  );
}
